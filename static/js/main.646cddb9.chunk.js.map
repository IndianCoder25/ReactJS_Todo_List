{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","this","props","items","map","item","index","className","key","type","id","value","text","onChange","e","updateItem","target","icon","onClick","deleteItem","Component","library","add","faTrash","App","state","currentItem","addItem","bind","handleInput","setState","Date","now","preventDefault","newitem","newItems","resultant","filter","newValue","onSubmit","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAIqBA,E,uKACP,IAAD,OACL,OACIC,KAAKC,MAAMC,MAAMC,KAAI,SAACC,EAAKC,GACvB,OAAQ,yBAAKC,UAAU,OAAOC,IAAKH,EAAKG,KACpC,2BACI,2BAAOC,KAAK,OAAOC,GAAIL,EAAKG,IAAKG,MAAON,EAAKO,KAAMC,SAAU,SAACC,GAAD,OAAK,EAAKZ,MAAMa,WAAWD,EAAEE,OAAOL,MAAMN,EAAKG,QAC5G,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAS,kBAAI,EAAKhB,MAAMiB,WAAWd,EAAKG,kB,GARpFY,a,eCElCC,IAAQC,IAAIC,K,IAESC,E,kDACjB,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IACDuB,MAAQ,CACTtB,MAAQ,GACRuB,YAAc,CACVd,KAAO,GACPJ,IAAM,KAGd,EAAKmB,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKT,WAAa,EAAKA,WAAWS,KAAhB,gBAClB,EAAKb,WAAa,EAAKA,WAAWa,KAAhB,gBAZJ,E,wDAcNd,GACRb,KAAK6B,SAAS,CACVJ,YAAc,CACVd,KAAOE,EAAEE,OAAOL,MAChBH,IAAMuB,KAAKC,W,8BAIflB,GACJA,EAAEmB,iBACF,IAAMC,EAAUjC,KAAKwB,MAAMC,YAC3B,GAAoB,KAAjBQ,EAAQtB,KAAY,CACnB,IAAMuB,EAAQ,sBAAOlC,KAAKwB,MAAMtB,OAAlB,CAAwB+B,IACtCjC,KAAK6B,SAAS,CACV3B,MAAQgC,EACRT,YAAc,CACVd,KAAO,GACPJ,IAAM,S,iCAKXA,GACP,IAAM4B,EAAYnC,KAAKwB,MAAMtB,MAAMkC,QAAO,SAAAhC,GAAI,OAAEA,EAAKG,MAAMA,KAC3DP,KAAK6B,SAAS,CACV3B,MAAMiC,M,iCAGHE,EAAS9B,GAChB,IAAML,EAAQF,KAAKwB,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACHA,EAAKG,MAAQA,IACZH,EAAKO,KAAO0B,MAGpBrC,KAAK6B,SAAS,CACV3B,MAAQA,M,+BAIZ,OACI,yBAAKI,UAAU,OACX,0BAAMG,GAAG,aAAa6B,SAAUtC,KAAK0B,SACjC,2BAAOpB,UAAU,QAAQE,KAAK,OAAOI,SAAUZ,KAAK4B,YAAaW,YAAY,eAC7E,4BAAQjC,UAAU,SAASE,KAAK,UAAhC,QAEJ,kBAAC,EAAD,CAAMN,MAAOF,KAAKwB,MAAMtB,MAAOgB,WAAYlB,KAAKkB,WAAYJ,WAAYd,KAAKc,kB,GA7D5DK,aCIbqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.646cddb9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './List.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\nexport default class List extends Component {\r\n    render() {\r\n        return (\r\n            this.props.items.map((item,index)=>{\r\n                return (<div className=\"list\" key={item.key}>\r\n                    <p>\r\n                        <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>this.props.updateItem(e.target.value,item.key)}></input>\r\n                        <span>\r\n                            <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={()=>this.props.deleteItem(item.key)}/>\r\n                        </span>\r\n                    </p>\r\n                </div>)\r\n            })\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './bootstrap.min.css'\r\nimport './App.css'\r\nimport List from './List'\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\r\nlibrary.add(faTrash)\r\n\r\nexport default class App extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            items : [],\r\n            currentItem : {\r\n                text : '',\r\n                key : ''\r\n            }\r\n        }\r\n        this.addItem = this.addItem.bind(this)\r\n        this.handleInput = this.handleInput.bind(this)\r\n        this.deleteItem = this.deleteItem.bind(this)\r\n        this.updateItem = this.updateItem.bind(this)\r\n    }\r\n    handleInput(e){\r\n        this.setState({\r\n            currentItem : {\r\n                text : e.target.value,\r\n                key : Date.now()\r\n            }\r\n        })\r\n    }\r\n    addItem(e){\r\n        e.preventDefault();\r\n        const newitem = this.state.currentItem\r\n        if(newitem.text !== \"\"){\r\n            const newItems = [...this.state.items,newitem]\r\n            this.setState({\r\n                items : newItems,\r\n                currentItem : {\r\n                    text : \"\",\r\n                    key : \"\"\r\n                }\r\n            })\r\n        }\r\n    }\r\n    deleteItem(key){\r\n        const resultant = this.state.items.filter(item=>item.key!==key)\r\n        this.setState({\r\n            items:resultant\r\n        })\r\n    }\r\n    updateItem(newValue,key){\r\n        const items = this.state.items\r\n        items.map(item=>{\r\n            if(item.key === key){\r\n                item.text = newValue\r\n            }\r\n        })\r\n        this.setState({\r\n            items : items\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n                    <input className=\"Input\" type=\"text\" onChange={this.handleInput} placeholder=\"Write here\"></input>\r\n                    <button className=\"Button\" type=\"submit\">Add</button>\r\n                </form>\r\n                <List items={this.state.items} deleteItem={this.deleteItem} updateItem={this.updateItem}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}